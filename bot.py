import logging
import asyncio
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.types import ContentType, InputMediaPhoto
import os
import json
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import aiohttp
import tempfile
from aiogram.types import InputFile

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 490364050
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1001234567890"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

POSTS_FILE = "posts.txt"

def load_posts():
    try:
        with open(POSTS_FILE, "r", encoding="utf-8") as f:
            posts = f.read().split("---")
            return [p.strip() for p in posts if p.strip()]
    except:
        return []

def save_posts(posts):
    with open(POSTS_FILE, "w", encoding="utf-8") as f:
        f.write("\n---\n".join(posts))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"),
    KeyboardButton("üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
).add(
    KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"),
    KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
).add(
    KeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç"),
    KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
)
main_kb.add(
    KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
    KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
    KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
    KeyboardButton("üìÜ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å—Ç–∞")
)

SCHEDULED_POSTS_FILE = "scheduled_posts.json"
scheduler = AsyncIOScheduler()
pending_posts = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

def load_scheduled_posts():
    try:
        with open(SCHEDULED_POSTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

def save_scheduled_posts(posts):
    with open(SCHEDULED_POSTS_FILE, "w", encoding="utf-8") as f:
        json.dump(posts, f, ensure_ascii=False, indent=2)

async def check_scheduled_posts():
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    posts = load_scheduled_posts()
    remaining = []

    for post in posts:
        if post["datetime"] == now:
            try:
                if post["type"] == "text":
                    await bot.send_message(CHANNEL_ID, post["text"], parse_mode=ParseMode.MARKDOWN)

                elif post["type"] == "photo":
                    await bot.send_photo(CHANNEL_ID, post["file_id"], caption=post.get("caption", ""), parse_mode=ParseMode.MARKDOWN)

                elif post["type"] == "album":
                    media = []
                    for m in post["media"]:
                        item = InputMediaPhoto(media=m["media"], caption=m.get("caption", ""))
                        media.append(item)
                    await bot.send_media_group(CHANNEL_ID, media)
                elif post["type"] == "photo_file":
                    photo = InputFile(post["path"])
                    await bot.send_photo(CHANNEL_ID, photo, caption=post.get("caption", ""), parse_mode=ParseMode.MARKDOWN)
                    os.remove(post["path"])  # üßπ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

            except Exception as e:
                logging.error(f"[SEND ERROR] {e}")
        else:
            remaining.append(post)

    save_scheduled_posts(remaining)

# === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
async def download_image_from_url(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                        tmp_file.write(await resp.read())
                        return tmp_file.name
    except Exception as e:
        logging.error(f"[IMAGE DOWNLOAD ERROR] {e}")
        return None

# –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
def get_preview_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_post"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post")
    )
    return keyboard
    
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º!", reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤")
async def list_posts(message: types.Message):
    posts = load_posts()
    if not posts:
        return await message.answer("‚ùå –ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    text = ""
    for i, p in enumerate(posts):
        preview = p.replace('\n', ' ')[:100]
        text += "{}. {}...\n\n".format(i + 1, preview)
    await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤:\n\n{}".format(text))

@dp.message_handler(lambda msg: msg.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
async def add_post_prompt(message: types.Message):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç. –ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")

    @dp.message_handler()
    async def receive_new_post(msg: types.Message):
        if msg.from_user.id != ADMIN_ID:
            return
        posts = load_posts()
        posts.append(msg.text.strip())
        save_posts(posts)
        await msg.answer("‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
        logging.info(f"[POST ADDED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –¥–æ–±–∞–≤–∏–ª –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç.")
        dp.message_handlers.unregister(receive_new_post)

@dp.message_handler(lambda msg: msg.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç")
async def delete_post_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")

    @dp.message_handler()
    async def receive_delete_index(msg: types.Message):
        if msg.from_user.id != ADMIN_ID:
            return
        try:
            index = int(msg.text.strip()) - 1
            posts = load_posts()
            if 0 <= index < len(posts):
                deleted = posts.pop(index)
                save_posts(posts)
                await msg.answer("üóë –£–¥–∞–ª—ë–Ω –ø–æ—Å—Ç:\n\n{}...".format(deleted[:100]))
                logging.info(f"[POST DELETED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} —É–¥–∞–ª–∏–ª –ø–æ—Å—Ç ‚Ññ{index + 1}")
            else:
                await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        except:
            await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        dp.message_handlers.unregister(receive_delete_index)

@dp.message_handler(lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    posts = load_posts()
    await message.answer(f"üìä –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")

# === ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ ===
@dp.message_handler(lambda msg: msg.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
async def edit_post_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")

    @dp.message_handler()
    async def receive_edit_index(msg: types.Message):
        if msg.from_user.id != ADMIN_ID:
            return
        try:
            index = int(msg.text.strip()) - 1
            posts = load_posts()
            if 0 <= index < len(posts):
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ ‚Ññ{}:".format(index + 1))

                @dp.message_handler()
                async def receive_new_content(new_msg: types.Message):
                    if new_msg.from_user.id != ADMIN_ID:
                        return
                    posts[index] = new_msg.text.strip()
                    save_posts(posts)
                    await new_msg.answer("‚úÖ –ü–æ—Å—Ç ‚Ññ{} –æ–±–Ω–æ–≤–ª—ë–Ω.".format(index + 1))
                    dp.message_handlers.unregister(receive_new_content)

                dp.message_handlers.unregister(receive_edit_index)
            else:
                await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞.")
                dp.message_handlers.unregister(receive_edit_index)
        except:
            await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
            dp.message_handlers.unregister(receive_edit_index)

@dp.message_handler(lambda msg: msg.text == "‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
async def schedule_post_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")

    @dp.message_handler()
    async def receive_datetime(msg: types.Message):
        if msg.from_user.id != ADMIN_ID:
            return
        try:
            scheduled_str = msg.text.strip()
            scheduled_time = datetime.strptime(scheduled_str, "%Y-%m-%d %H:%M")

            if scheduled_time <= datetime.now():
                await msg.answer("‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.")
                dp.message_handlers.unregister(receive_datetime)
                return

            await msg.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç: —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –∞–ª—å–±–æ–º –∏–∑ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")

            album = []

            @dp.message_handler(content_types=ContentType.ANY)
            async def receive_post(msg: types.Message):
                if msg.from_user.id != ADMIN_ID:
                    return

                if msg.content_type == ContentType.TEXT:
                    post = {
                        "datetime": scheduled_time.strftime("%Y-%m-%d %H:%M"),
                        "type": "text",
                        "text": msg.text.strip()
                    }
                elif msg.text.strip().startswith("http"):
                    img_path = await download_image_from_url(msg.text.strip())
                    if img_path:
                        post = {
                            "datetime": scheduled_time.strftime("%Y-%m-%d %H:%M"),
                            "type": "photo_file",
                            "path": img_path,
                            "caption": ""
                        }
                    else:
                        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ.")
                        return
                elif msg.content_type == ContentType.PHOTO:
                    post = {
                        "datetime": scheduled_time.strftime("%Y-%m-%d %H:%M"),
                        "type": "photo",
                        "file_id": msg.photo[-1].file_id,
                        "caption": msg.caption or ""
                    }
                elif msg.media_group_id:
                    album.append(msg)
                    await asyncio.sleep(1.5)
                    if not album or msg.media_group_id != album[0].media_group_id:
                        return
                    post = {
                        "datetime": scheduled_time.strftime("%Y-%m-%d %H:%M"),
                        "type": "album",
                        "media": [{"type": "photo", "media": m.photo[-1].file_id, "caption": m.caption or ""} for m in album]
                    }
                else:
                    await msg.answer("‚ö†Ô∏è –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                    return

                pending_posts[msg.from_user.id] = post

                if post["type"] == "text":
                    await msg.answer(post["text"], parse_mode=ParseMode.MARKDOWN, reply_markup=get_preview_keyboard())
                elif post["type"] == "photo":
                    await bot.send_photo(msg.chat.id, post["file_id"], caption=post.get("caption", ""), parse_mode=ParseMode.MARKDOWN, reply_markup=get_preview_keyboard())
                elif post["type"] == "photo_file":
                    photo = InputFile(post["path"])
                    await bot.send_photo(msg.chat.id, photo, caption=post.get("caption", ""), parse_mode=ParseMode.MARKDOWN, reply_markup=get_preview_keyboard())
                elif post["type"] == "album":
                    await msg.answer("üì∑ –î–ª—è –∞–ª—å–±–æ–º–æ–≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –°–æ—Ö—Ä–∞–Ω—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                    posts = load_scheduled_posts()
                    posts.append(post)
                    save_scheduled_posts(posts)

            dp.message_handlers.unregister(receive_datetime)

        except ValueError:
            await msg.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `2025-04-15 18:30`", parse_mode=ParseMode.MARKDOWN)
            dp.message_handlers.unregister(receive_datetime)

            dp.message_handlers.unregister(receive_datetime)
        except:
            await msg.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: 2025-04-10 12:00")
            dp.message_handlers.unregister(receive_datetime)

@dp.callback_query_handler(lambda c: c.data in ["confirm_post", "cancel_post"])
async def handle_preview_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    if callback.data == "confirm_post":
        if user_id in pending_posts:
            post = pending_posts.pop(user_id)
            posts = load_scheduled_posts()
            posts.append(post)
            save_scheduled_posts(posts)
            await callback.message.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {post['datetime']}")
            logging.info(f"[POST SCHEDULED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç –Ω–∞ {post['datetime']}")
        await callback.message.delete()
    elif callback.data == "cancel_post":
        pending_posts.pop(user_id, None)
        await callback.message.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
        await callback.message.delete()

@dp.message_handler(lambda msg: msg.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: types.Message):
    posts = load_scheduled_posts()
    if not posts:
        return await message.answer("üì≠ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")

    text = ""
    for i, post in enumerate(posts):
        dt = post["datetime"]
        preview = ""
        if post["type"] == "text":
            preview = post["text"][:80]
        elif post["type"] == "photo":
            preview = f"[–§–æ—Ç–æ] {post.get('caption', '')[:80]}"
        elif post["type"] == "photo_file":
            preview = f"[–§–æ—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ] {post.get('caption', '')[:80]}"
        elif post["type"] == "album":
            preview = f"[–ê–ª—å–±–æ–º –∏–∑ {len(post['media'])} —Ñ–æ—Ç–æ]"

        text += f"{i+1}. üóì {dt}\n{preview}\n\n"

    await message.answer("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n" + text)

@dp.message_handler(lambda msg: msg.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
async def delete_scheduled_prompt(message: types.Message):
    posts = load_scheduled_posts()
    if not posts:
        return await message.answer("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    text = ""
    for i, post in enumerate(posts):
        dt = post["datetime"]
        preview = ""
        if post["type"] == "text":
            preview = post["text"][:60]
        elif post["type"] == "photo":
            preview = f"[–§–æ—Ç–æ] {post.get('caption', '')[:60]}"
        elif post["type"] == "photo_file":
            preview = f"[–§–æ—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ] {post.get('caption', '')[:60]}"
        elif post["type"] == "album":
            preview = f"[–ê–ª—å–±–æ–º –∏–∑ {len(post['media'])} —Ñ–æ—Ç–æ]"
        text += f"{i + 1}. üóì {dt}\n{preview}\n\n"

    await message.answer("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n" + text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

    @dp.message_handler()
    async def receive_delete_index(msg: types.Message):
        if msg.from_user.id != ADMIN_ID:
            return
        try:
            index = int(msg.text.strip()) - 1
            if 0 <= index < len(posts):
                deleted = posts.pop(index)
                save_scheduled_posts(posts)
                await msg.answer(f"üóë –£–¥–∞–ª—ë–Ω –ø–æ—Å—Ç –Ω–∞ {deleted['datetime']}")
            else:
                await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        except:
            await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        dp.message_handlers.unregister(receive_delete_index)

@dp.message_handler(lambda msg: msg.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
async def edit_scheduled_prompt(message: types.Message):
    posts = load_scheduled_posts()
    if not posts:
        return await message.answer("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    text = ""
    for i, post in enumerate(posts):
        dt = post["datetime"]
        preview = ""
        if post["type"] == "text":
            preview = post["text"][:60]
        elif post["type"] == "photo":
            preview = f"[–§–æ—Ç–æ] {post.get('caption', '')[:60]}"
        elif post["type"] == "photo_file":
            preview = f"[–§–æ—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ] {post.get('caption', '')[:60]}"
        elif post["type"] == "album":
            preview = f"[–ê–ª—å–±–æ–º –∏–∑ {len(post['media'])} —Ñ–æ—Ç–æ]"
        text += f"{i + 1}. üóì {dt}\n{preview}\n\n"

    await message.answer("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n" + text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")

    @dp.message_handler()
    async def receive_edit_index(msg: types.Message):
        if msg.from_user.id != ADMIN_ID:
            return

        try:
            index = int(msg.text.strip()) - 1
            posts = load_scheduled_posts()
            if 0 <= index < len(posts):
                await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∞–ª—å–±–æ–º –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

                @dp.message_handler(content_types=ContentType.ANY)
                async def receive_new_post(msg: types.Message):
                    new_post = None

                    if msg.content_type == ContentType.TEXT:
                        if msg.text.strip().startswith("http"):
                            # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            img_path = await download_image_from_url(msg.text.strip())
                            if img_path:
                                new_post = {
                                    "datetime": posts[index]["datetime"],
                                    "type": "photo_file",
                                    "path": img_path,
                                    "caption": ""
                                }
                            else:
                                await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                                return
                        else:
                            new_post = {
                                "datetime": posts[index]["datetime"],
                                "type": "text",
                                "text": msg.text.strip()
                            }
                    elif msg.content_type == ContentType.PHOTO:
                        new_post = {
                            "datetime": posts[index]["datetime"],
                            "type": "photo",
                            "file_id": msg.photo[-1].file_id,
                            "caption": msg.caption or ""
                        }
                    elif msg.media_group_id:
                        # –ê–ª—å–±–æ–º
                        album = [msg]
                        await asyncio.sleep(1.5)  # –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ç–æ
                        new_post = {
                            "datetime": posts[index]["datetime"],
                            "type": "album",
                            "media": [{"type": "photo", "media": m.photo[-1].file_id, "caption": m.caption or ""} for m in album]
                        }
                    else:
                        await msg.answer("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–æ—Å—Ç–∞.")
                        return

                    posts[index] = new_post
                    save_scheduled_posts(posts)
                    await msg.answer("‚úÖ –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
                    dp.message_handlers.unregister(receive_new_post)

                dp.message_handlers.unregister(receive_edit_index)
            else:
                await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
                dp.message_handlers.unregister(receive_edit_index)
        except:
            await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
            dp.message_handlers.unregister(receive_edit_index)

@dp.message_handler(lambda msg: msg.text == "üìÜ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å—Ç–∞")
async def change_post_date(message: types.Message):
    posts = load_scheduled_posts()
    if not posts:
        return await message.answer("üì≠ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")

    text = ""
    for i, post in enumerate(posts):
        dt = post["datetime"]
        preview = ""
        if post["type"] == "text":
            preview = post["text"][:60]
        elif post["type"] == "photo":
            preview = f"[–§–æ—Ç–æ] {post.get('caption', '')[:60]}"
        elif post["type"] == "photo_file":
            preview = f"[–§–æ—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ] {post.get('caption', '')[:60]}"
        elif post["type"] == "album":
            preview = f"[–ê–ª—å–±–æ–º –∏–∑ {len(post['media'])} —Ñ–æ—Ç–æ]"
        text += f"{i + 1}. üóì {dt}\n{preview}\n\n"

    await message.answer("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n" + text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É:")

    @dp.message_handler()
    async def receive_post_number(msg: types.Message):
        if msg.from_user.id != ADMIN_ID:
            return
        try:
            index = int(msg.text.strip()) - 1
            posts = load_scheduled_posts()
            if 0 <= index < len(posts):
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `2025-04-15 18:30`", parse_mode=ParseMode.MARKDOWN)

                @dp.message_handler()
                async def receive_new_datetime(new_msg: types.Message):
                    if new_msg.from_user.id != ADMIN_ID:
                        return
                    try:
                        new_dt = datetime.strptime(new_msg.text.strip(), "%Y-%m-%d %H:%M")
                        if new_dt <= datetime.now():
                            await new_msg.answer("‚ö†Ô∏è –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
                            return
                        posts[index]["datetime"] = new_dt.strftime("%Y-%m-%d %H:%M")
                        save_scheduled_posts(posts)
                        await new_msg.answer("‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                        dp.message_handlers.unregister(receive_new_datetime)
                    except:
                        await new_msg.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 2025-04-15 18:30")
                dp.message_handlers.unregister(receive_post_number)
            else:
                await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞.")
                dp.message_handlers.unregister(receive_post_number)
        except:
            await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
            dp.message_handlers.unregister(receive_post_number)
    
# ===== StubServer –¥–ª—è Render (—á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –∏–∑-–∑–∞ –ø–æ—Ä—Ç–æ–≤) =====
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

class StubServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is alive!")

def run_stub_server():
    server = HTTPServer(("0.0.0.0", 10000), StubServer)
    server.serve_forever()

threading.Thread(target=run_stub_server, daemon=True).start()

# ===== –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ =====
async def on_startup(_):
    scheduler.add_job(check_scheduled_posts, "interval", minutes=1)
    scheduler.start()

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
